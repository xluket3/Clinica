// <auto-generated />
using System;
using ClinicaSonrrisaPlena.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVCClinica.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250614211344_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.HistorialTratamiento", b =>
                {
                    b.Property<int>("IdHistorial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistorial"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdOdontologo")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<int>("IdTratamiento")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdHistorial");

                    b.HasIndex("IdOdontologo");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdTratamiento");

                    b.ToTable("Historiales");
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.PasoPlan", b =>
                {
                    b.Property<int>("IdPaso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPaso"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaEstimada")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlan")
                        .HasColumnType("int");

                    b.Property<int>("IdTratamiento")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPaso");

                    b.HasIndex("IdPlan");

                    b.HasIndex("IdTratamiento");

                    b.ToTable("Pasos");
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Personas", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.PlanTratamiento", b =>
                {
                    b.Property<int>("IdPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlan"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdOdontologo")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<string>("ObservacionesGenerales")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPlan");

                    b.HasIndex("IdOdontologo");

                    b.HasIndex("IdPaciente");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.Tratamiento", b =>
                {
                    b.Property<int>("IdTratamiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTratamiento"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrecioEstimado")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("IdTratamiento");

                    b.ToTable("Tratamientos");
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.Turno", b =>
                {
                    b.Property<int>("IdTurno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTurno"));

                    b.Property<int>("Duracion")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdOdontologo")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.HasKey("IdTurno");

                    b.HasIndex("IdOdontologo");

                    b.HasIndex("IdPaciente");

                    b.ToTable("Turnos");
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.Administrador", b =>
                {
                    b.HasBaseType("ClinicaSonrrisaPlena.Models.Entities.Persona");

                    b.Property<string>("RolDescripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Administradores", (string)null);
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.Odontologo", b =>
                {
                    b.HasBaseType("ClinicaSonrrisaPlena.Models.Entities.Persona");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Odontologos", (string)null);
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.Paciente", b =>
                {
                    b.HasBaseType("ClinicaSonrrisaPlena.Models.Entities.Persona");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RUT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Pacientes", (string)null);
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.Recepcionista", b =>
                {
                    b.HasBaseType("ClinicaSonrrisaPlena.Models.Entities.Persona");

                    b.Property<string>("Interno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Recepcionistas", (string)null);
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.HistorialTratamiento", b =>
                {
                    b.HasOne("ClinicaSonrrisaPlena.Models.Entities.Odontologo", "Odontologo")
                        .WithMany("Historiales")
                        .HasForeignKey("IdOdontologo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicaSonrrisaPlena.Models.Entities.Paciente", "Paciente")
                        .WithMany("Historiales")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicaSonrrisaPlena.Models.Entities.Tratamiento", "Tratamiento")
                        .WithMany("Historiales")
                        .HasForeignKey("IdTratamiento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Odontologo");

                    b.Navigation("Paciente");

                    b.Navigation("Tratamiento");
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.PasoPlan", b =>
                {
                    b.HasOne("ClinicaSonrrisaPlena.Models.Entities.PlanTratamiento", "Plan")
                        .WithMany("Pasos")
                        .HasForeignKey("IdPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicaSonrrisaPlena.Models.Entities.Tratamiento", "Tratamiento")
                        .WithMany("Pasos")
                        .HasForeignKey("IdTratamiento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Tratamiento");
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.PlanTratamiento", b =>
                {
                    b.HasOne("ClinicaSonrrisaPlena.Models.Entities.Odontologo", "Odontologo")
                        .WithMany("Planes")
                        .HasForeignKey("IdOdontologo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicaSonrrisaPlena.Models.Entities.Paciente", "Paciente")
                        .WithMany("Planes")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Odontologo");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.Turno", b =>
                {
                    b.HasOne("ClinicaSonrrisaPlena.Models.Entities.Odontologo", "Odontologo")
                        .WithMany("Turnos")
                        .HasForeignKey("IdOdontologo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicaSonrrisaPlena.Models.Entities.Paciente", "Paciente")
                        .WithMany("Turnos")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Odontologo");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.Administrador", b =>
                {
                    b.HasOne("ClinicaSonrrisaPlena.Models.Entities.Persona", null)
                        .WithOne()
                        .HasForeignKey("ClinicaSonrrisaPlena.Models.Entities.Administrador", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.Odontologo", b =>
                {
                    b.HasOne("ClinicaSonrrisaPlena.Models.Entities.Persona", null)
                        .WithOne()
                        .HasForeignKey("ClinicaSonrrisaPlena.Models.Entities.Odontologo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.Paciente", b =>
                {
                    b.HasOne("ClinicaSonrrisaPlena.Models.Entities.Persona", null)
                        .WithOne()
                        .HasForeignKey("ClinicaSonrrisaPlena.Models.Entities.Paciente", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.Recepcionista", b =>
                {
                    b.HasOne("ClinicaSonrrisaPlena.Models.Entities.Persona", null)
                        .WithOne()
                        .HasForeignKey("ClinicaSonrrisaPlena.Models.Entities.Recepcionista", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.PlanTratamiento", b =>
                {
                    b.Navigation("Pasos");
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.Tratamiento", b =>
                {
                    b.Navigation("Historiales");

                    b.Navigation("Pasos");
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.Odontologo", b =>
                {
                    b.Navigation("Historiales");

                    b.Navigation("Planes");

                    b.Navigation("Turnos");
                });

            modelBuilder.Entity("ClinicaSonrrisaPlena.Models.Entities.Paciente", b =>
                {
                    b.Navigation("Historiales");

                    b.Navigation("Planes");

                    b.Navigation("Turnos");
                });
#pragma warning restore 612, 618
        }
    }
}
